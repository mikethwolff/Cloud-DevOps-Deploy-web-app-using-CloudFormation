Description: 
            Udacity DevOps Project
            This template deploys SERVER resources for the Udacity high-available-website-project
Parameters:
  EnvironmentName:
    Description: An Environment name that will be prefixed to resources
    Type: String
  MinAutoScalingSize:
    Description: The minimum size for the auto scaling group
    Type: String
  MaxAutoScalingSize:
    Description: The maximum size for the auto scaling group
    Type: String

Resources:

#-- allowing EC2 access to S3
  UdacityS3ReadOnlyEC2:
      Type: AWS::IAM::Role
      Properties:
          RoleName: 
              !Sub ${EnvironmentName}-Role
          AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
              -   Effect: Allow
                  Principal:
                      Service:
                      - ec2.amazonaws.com
                  Action:
                  - sts:AssumeRole
          Path: "/"

  RolePolicies:
      Type: AWS::IAM::Policy
      Properties:
          PolicyName: AmazonS3ReadOnlyAccess
          PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - 
                  Effect: Allow
                  Action: 
                  -   s3:Get*
                  -   s3:List*
                  Resource: 
                  -   arn:aws:s3:::udacitymwdevopsbucket
                  -   arn:aws:s3:::udacitymwdevopsbucket/*
          Roles:
          -   Ref: UdacityS3ReadOnlyEC2

  ProfileWithRolesForOurApp:
      Type: AWS::IAM::InstanceProfile
      Properties:
          Path: "/"
          Roles:
          - Ref: UdacityS3ReadOnlyEC2

#-- Security groups
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to the loadbalancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our webApp Hosts and ssh only from local
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

#-- Launch configuration & auto scaling 
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install unzip awscli -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            aws s3 cp s3://udacitymwdevopsbucket/udacity.zip .
            unzip -o udacity.zip
      ImageId: ami-0ac73f33a1888c64a
      #-ImageId: ami-03d5c68bab01f3496
      KeyName: DevOpsKey
      SecurityGroups:
        - Ref: WebServerSecurityGroup
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      InstanceType: t3.medium
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      MinSize: !Ref MinAutoScalingSize
      MaxSize: !Ref MaxAutoScalingSize
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

#-- Load balancer 
  WebApploadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebApploadBalancer
      Port: 80
      Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn:
        Ref: Listener
      Priority: 1

#-- Target group
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

#-- Link
Outputs:
  LoadBanlancerEndpoint:
    Description: this is the endpoint to use for accessing the loadbanlancer
    Value: !Join ["", ["http://", !GetAtt WebApploadBalancer.DNSName]]
    Export:
      #Name: !Sub ${EnvironmentName}-LBURL
      Name: !Sub ${EnvironmentName}-DNS-NAME
